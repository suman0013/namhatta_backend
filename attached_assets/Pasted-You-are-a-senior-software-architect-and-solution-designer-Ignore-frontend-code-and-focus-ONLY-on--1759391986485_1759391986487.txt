You are a senior software architect and solution designer. 
Ignore frontend code and focus ONLY on the backend (Node/Express, database, services, APIs).

Your job is to generate a **complete requirement + implementation plan document** that will allow the backend to be reimplemented in Spring Boot.

---

### Step 1. System Overview (Backend Only)
- Describe what the backend does in functional terms.
- Summarize its role in the overall system.

### Step 2. API Specifications
- List every API endpoint from the Node backend.
- For each API, provide:
  - Endpoint (path, e.g., `/users/login`)
  - HTTP Method (GET/POST/PUT/DELETE)
  - Authentication/Authorization requirements
  - Request Payload:
    - Fields with type and validation rules
  - Response Payload:
    - Fields with type and meaning
  - Error Codes & Messages
- Organize APIs by feature/module.

### Step 3. Data & Entities
- Extract database schema/entities from the backend.
- Define each entity, its attributes, and relationships.
- Map to CRUD operations exposed via APIs.

### Step 4. Business Logic & Rules
- For each feature/API, list rules, validation logic, conditions, and workflows.

### Step 5. Non-Functional Requirements
- Security (JWT, roles, permissions)
- Performance expectations
- Error handling and logging
- Scalability considerations

### Step 6. Task Breakdown (Spring Boot Implementation Plan)
Provide a **hierarchical, ordered, prerequisite-aware task list** for reimplementing the backend in Spring Boot.

Structure:
1. Setup & Foundations
   1.1 Define project scope (Spring Boot migration only)  
   1.2 Identify entities and relationships  
   1.3 Plan API endpoints  

2. Data Layer
   2.1 Create entities as JPA models  
   2.2 Define repositories  
   2.3 Configure database  

3. Service Layer
   3.1 Implement core services for [Entity X]  
   3.2 Implement business rules for [Feature Y]  

4. Controller Layer (APIs)
   4.1 Implement API endpoint `/xyz`  
       - Handle request mapping  
       - Validate input  
       - Call service layer  
       - Return response DTO  
       - Handle errors  
   4.2 Repeat for all endpoints in order  

5. Security & Authentication
   5.1 Setup authentication mechanism  
   5.2 Setup role-based authorization  

6. Integrations (if any)
   6.1 Implement integration with [Service A]  
   6.2 Define error handling  

7. Testing
   7.1 Unit test services  
   7.2 API integration tests  
   7.3 Security tests  

8. Deployment Preparation
   8.1 Externalized configuration  
   8.2 Environment profiles  

- Each task should only depend on previous tasks (no circular dependencies).
- Make **granular subtasks** so an AI agent or developer can follow step-by-step.

---

### Step 7. Assumptions / Clarifications
- List anything ambiguous or missing in the Node code that requires stakeholder input.

---

### Guidelines
- Do NOT reference Node/Express libraries or implementation details.  
- Only describe *what needs to be built* in Spring Boot, not *how Node did it*.  
- Be exhaustive: capture every entity, API, validation, and rule.  
- Maintain professional document style so it can serve directly as a **blueprint for reimplementation**.